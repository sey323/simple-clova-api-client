# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protobufpy.protocol_adapter_pb2 as protocol__adapter__pb2


class RecognizerStub(object):
    """*
    Speech-To-Text RPCs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Recognize = channel.unary_unary(
                '/ccai.vsg.recogntition.v1.Recognizer/Recognize',
                request_serializer=protocol__adapter__pb2.RecognitionRequest.SerializeToString,
                response_deserializer=protocol__adapter__pb2.RecognitionResponse.FromString,
                )
        self.StreamingRecognize = channel.stream_stream(
                '/ccai.vsg.recogntition.v1.Recognizer/StreamingRecognize',
                request_serializer=protocol__adapter__pb2.StreamingRecognitionRequest.SerializeToString,
                response_deserializer=protocol__adapter__pb2.StreamingRecognitionResponse.FromString,
                )
        self.MixedStreamingRecognize = channel.stream_stream(
                '/ccai.vsg.recogntition.v1.Recognizer/MixedStreamingRecognize',
                request_serializer=protocol__adapter__pb2.RecognitionRequest.SerializeToString,
                response_deserializer=protocol__adapter__pb2.RecognitionResponse.FromString,
                )
        self.LongRunningRecognize = channel.unary_unary(
                '/ccai.vsg.recogntition.v1.Recognizer/LongRunningRecognize',
                request_serializer=protocol__adapter__pb2.LongRunningRecognitionRequest.SerializeToString,
                response_deserializer=protocol__adapter__pb2.LongRunningRecognitionResponse.FromString,
                )
        self.GetLongRunningRecognitionState = channel.unary_unary(
                '/ccai.vsg.recogntition.v1.Recognizer/GetLongRunningRecognitionState',
                request_serializer=protocol__adapter__pb2.LongRunningRecognitionRequest.SerializeToString,
                response_deserializer=protocol__adapter__pb2.LongRunningRecognitionResponse.FromString,
                )


class RecognizerServicer(object):
    """*
    Speech-To-Text RPCs
    """

    def Recognize(self, request, context):
        """Speech-To-Text RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingRecognize(self, request_iterator, context):
        """Streaming Speech-To-Text RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MixedStreamingRecognize(self, request_iterator, context):
        """Mixed-streaming Speech-To-Text RPC (currently N/A)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LongRunningRecognize(self, request, context):
        """Async Speech-To-Text RPC (currently N/A)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLongRunningRecognitionState(self, request, context):
        """RPC to fetch the result of async Speech-To-Text request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecognizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Recognize': grpc.unary_unary_rpc_method_handler(
                    servicer.Recognize,
                    request_deserializer=protocol__adapter__pb2.RecognitionRequest.FromString,
                    response_serializer=protocol__adapter__pb2.RecognitionResponse.SerializeToString,
            ),
            'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRecognize,
                    request_deserializer=protocol__adapter__pb2.StreamingRecognitionRequest.FromString,
                    response_serializer=protocol__adapter__pb2.StreamingRecognitionResponse.SerializeToString,
            ),
            'MixedStreamingRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.MixedStreamingRecognize,
                    request_deserializer=protocol__adapter__pb2.RecognitionRequest.FromString,
                    response_serializer=protocol__adapter__pb2.RecognitionResponse.SerializeToString,
            ),
            'LongRunningRecognize': grpc.unary_unary_rpc_method_handler(
                    servicer.LongRunningRecognize,
                    request_deserializer=protocol__adapter__pb2.LongRunningRecognitionRequest.FromString,
                    response_serializer=protocol__adapter__pb2.LongRunningRecognitionResponse.SerializeToString,
            ),
            'GetLongRunningRecognitionState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLongRunningRecognitionState,
                    request_deserializer=protocol__adapter__pb2.LongRunningRecognitionRequest.FromString,
                    response_serializer=protocol__adapter__pb2.LongRunningRecognitionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ccai.vsg.recogntition.v1.Recognizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Recognizer(object):
    """*
    Speech-To-Text RPCs
    """

    @staticmethod
    def Recognize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ccai.vsg.recogntition.v1.Recognizer/Recognize',
            protocol__adapter__pb2.RecognitionRequest.SerializeToString,
            protocol__adapter__pb2.RecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ccai.vsg.recogntition.v1.Recognizer/StreamingRecognize',
            protocol__adapter__pb2.StreamingRecognitionRequest.SerializeToString,
            protocol__adapter__pb2.StreamingRecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MixedStreamingRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ccai.vsg.recogntition.v1.Recognizer/MixedStreamingRecognize',
            protocol__adapter__pb2.RecognitionRequest.SerializeToString,
            protocol__adapter__pb2.RecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LongRunningRecognize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ccai.vsg.recogntition.v1.Recognizer/LongRunningRecognize',
            protocol__adapter__pb2.LongRunningRecognitionRequest.SerializeToString,
            protocol__adapter__pb2.LongRunningRecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLongRunningRecognitionState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ccai.vsg.recogntition.v1.Recognizer/GetLongRunningRecognitionState',
            protocol__adapter__pb2.LongRunningRecognitionRequest.SerializeToString,
            protocol__adapter__pb2.LongRunningRecognitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
